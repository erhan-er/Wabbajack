<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClubManagerBackup</name>
    </assembly>
    <members>
        <member name="T:ClubManagerBackup.Context.AuthRepository">
            <summary>
            Repository for Authentication
            </summary>
        </member>
        <member name="F:ClubManagerBackup.Context.AuthRepository.context">
            <summary>
            Database reference.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.AuthRepository.#ctor(ClubManagerBackup.Context.DataContext)">
            <summary>
            Constructor for AuthRepository class.
            </summary>
            <param name="context">Database reference.</param>
        </member>
        <member name="M:ClubManagerBackup.Context.AuthRepository.Login(System.String,System.String)">
            <summary>
            Tries to find user with given mail and password in database.
            </summary>
            <param name="userMail">Entered email adress of user that is trying to log in.</param>
            <param name="password">Entered password of user that is trying to log in.</param>
            <returns>Returns the user with entered mail and password. Returns null if user does not exists.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.AuthRepository.VerifyPasswordHash(System.String,System.Byte[],System.Byte[])">
            <summary>
            Checks if entered password of the user is same with user's password in the database.
            </summary>
            <param name="password">Entered password without encryption in login screen.</param>
            <param name="passwordHash">Hashed password of user in the database.</param>
            <param name="passwordSalt">Salted password of user in the database.</param>
            <returns>Returns true if entered password matches the user's password in the database, else returns false.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.AuthRepository.Register(ClubManagerBackup.Entities.User,System.String)">
            <summary>
            Register users to the database by hashing their passwords.
            </summary>
            <param name="user">User that is to be registered.</param>
            <param name="password">Password of the user to be registered.</param>
            <returns>Returns registered user.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.AuthRepository.CreatePasswordHash(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Creates hashed and salted password with given password.
            </summary>
            <param name="password">Password to be hashed.</param>
            <param name="passwordHash">Hashed password.</param>
            <param name="passwordSalt">Salted password.</param>
        </member>
        <member name="M:ClubManagerBackup.Context.AuthRepository.UserExists(System.String)">
            <summary>
            Checks if given user with user name exists in the database.
            </summary>
            <param name="userName">Username to be checked in the database.</param>
            <returns>Returns true if user exists, else return false.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.AuthRepository.UserExistsWithMail(System.String)">
            <summary>
            Checks if given user with user name exists in the database.
            </summary>
            <param name="mail">Mail to be checked in the database.</param>
            <returns>Returns true if user exists, else return false.</returns>
        </member>
        <member name="T:ClubManagerBackup.Context.CategoryRepository">
            <summary>
            Repository for Category
            </summary>
        </member>
        <member name="F:ClubManagerBackup.Context.CategoryRepository.context">
            <summary>
            Database reference.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.CategoryRepository.#ctor(ClubManagerBackup.Context.DataContext)">
            <summary>
            Constructor for Category Repository class
            </summary>
            <param name="context">Database reference.</param>
        </member>
        <member name="M:ClubManagerBackup.Context.CategoryRepository.AddCategory(ClubManagerBackup.Entities.Category)">
            <summary>
            Adds new category to the database.
            </summary>
            <param name="newCategory">Category to be added.</param>
            <returns>Returns added category.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.CategoryRepository.DeleteCategory(ClubManagerBackup.Entities.Category)">
            <summary>
            Deletes category from the database.
            </summary>
            <param name="categoryToDelete">Category to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Context.CategoryRepository.GetCategoryByID(System.Int32)">
            <summary>
            Finds a category from the databse with given ID.
            </summary>
            <param name="ID">ID of the searched category.</param>
            <returns>Returns category with given ID.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.CategoryRepository.GetCategories">
            <summary>
            Gets all categories from the database.
            </summary>
            <returns>Returns the list of all categories.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.CategoryRepository.CategoryExists(System.String)">
            <summary>
            Checks if category with given name exists in the database.
            </summary>
            <param name="categoryName">Category name to be checked.</param>
            <returns>Returns true if category exists, else returns false.</returns>
        </member>
        <member name="T:ClubManagerBackup.Context.ClubEventCreator">
            <summary>
            Club Event Creator
            </summary>
        </member>
        <member name="F:ClubManagerBackup.Context.ClubEventCreator.instance">
            <summary>
            Club Event Creator instance
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.ClubEventCreator.getInstance">
            <summary>
            Gets singleton instance of ClubEventCreator object.
            </summary>
            <returns>Returns the ClubEventCreator.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ClubEventCreator.CreateEvent(ClubManagerBackup.Entities.StudentEvent,ClubManagerBackup.Context.DataContext)">
            <summary>
            Creates club event.
            </summary>
            <param name="newEvent">Event to be created.</param>
            <param name="context">Database to store the event.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Context.ClubRepository">
            <summary>
            Repository for Clubs
            </summary>
        </member>
        <member name="F:ClubManagerBackup.Context.ClubRepository.context">
            <summary>
            Database reference.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.ClubRepository.#ctor(ClubManagerBackup.Context.DataContext)">
            <summary>
            Constructor for ClubRepository.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ClubManagerBackup.Context.ClubRepository.AddClub(ClubManagerBackup.Entities.Club)">
            <summary>
            Adds new club to the database.
            </summary>
            <param name="newClub">New club to be added.</param>
            <returns>Returns added club.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ClubRepository.ClubExists(System.String)">
            <summary>
            Checks if the club with given club name is exists in the database.
            </summary>
            <param name="clubName">Club name to be checked.</param>
            <returns>Returns true if club exists, else return false.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ClubRepository.GetClubById(System.Int32)">
            <summary>
            Finds a club from the databse with given ID.
            </summary>
            <param name="id">ID of the searched club.</param>
            <returns>Returns the club with given ID.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ClubRepository.GetClubByName(System.String)">
            <summary>
            Finds a club from the database with given name.
            </summary>
            <param name="name">Name of the searched club.</param>
            <returns>Returns the with given name.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ClubRepository.GetClubs">
            <summary>
            Gets all clubs from the database.
            </summary>
            <returns>Returns the list of all clubs.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ClubRepository.UpdateClub(ClubManagerBackup.Entities.Club)">
            <summary>
            Updates the club data in the database.
            </summary>
            <param name="clubToUpdate">Club to be updated.</param>
            <returns>Returns updated club.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ClubRepository.RemoveClub(ClubManagerBackup.Entities.Club)">
            <summary>
            Removes club from the database.
            </summary>
            <param name="clubToDelete">Club to be deleted.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Context.EventHandler">
            <summary>
            Event Handler for Composite Design Pattern
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.EventHandler.#ctor(ClubManagerBackup.Context.IEventHandler)">
            <summary>
            Constructor for EventHandler class.
            </summary>
            <param name="eventHandler">EventHandler interface.</param>
        </member>
        <member name="M:ClubManagerBackup.Context.EventHandler.CreateEvent(ClubManagerBackup.Entities.StudentEvent,ClubManagerBackup.Context.DataContext)">
            <summary>
            Creates event.
            </summary>
            <param name="newEvent">Event to be created.</param>
            <param name="context">Database reference.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Context.EventRepository">
            <summary>
            Repository for Events
            </summary>
        </member>
        <member name="F:ClubManagerBackup.Context.EventRepository.context">
            <summary>
            Database reference.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.EventRepository.#ctor(ClubManagerBackup.Context.DataContext)">
            <summary>
            Constructor for EventRepository class
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ClubManagerBackup.Context.EventRepository.AddEvent(ClubManagerBackup.Entities.Event)">
            <summary>
            Adds new event to the database. 
            </summary>
            <param name="newEvent">New event to be added.</param>
            <returns>Returns added event.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.EventRepository.DeleteEvent(ClubManagerBackup.Entities.Event)">
            <summary>
            Deletes event from the database.
            </summary>
            <param name="eventToDelete">Event to be deleted.</param>
        </member>
        <member name="M:ClubManagerBackup.Context.EventRepository.UpdateEvent(ClubManagerBackup.Entities.Event)">
            <summary>
            Updates the event data in the database.
            </summary>
            <param name="eventToUpdate">Event to be updated.</param>
            <returns>Returns updated event.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.EventRepository.GetEventByID(System.Int32)">
            <summary>
            Finds a event from the database with given ID.
            </summary>
            <param name="ID">ID of the searched event.</param>
            <returns>Returns the with given ID.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.EventRepository.GetEvents">
            <summary>
            Gets all events in the database.
            </summary>
            <returns>Returns list of all events.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.EventRepository.EventExists(System.String)">
            <summary>
            Checks if event with given name exists in the database. 
            </summary>
            <param name="name">Name of the club to be checked.</param>
            <returns>Returns true if event exists, else returns false.</returns>
        </member>
        <member name="T:ClubManagerBackup.Context.IAuthRepository">
            <summary>
            Interface for AuthRepository
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.IAuthRepository.Register(ClubManagerBackup.Entities.User,System.String)">
            <summary>
            Register users to the database by hashing their passwords.
            </summary>
            <param name="user">User that is to be registered.</param>
            <param name="password">Password of the user to be registered.</param>
            <returns>Returns registered user.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IAuthRepository.Login(System.String,System.String)">
            <summary>
            Tries to find user with given mail and password in database.
            </summary>
            <param name="userMail">Entered email adress of user that is trying to log in.</param>
            <param name="password">Entered password of user that is trying to log in.</param>
            <returns>Returns the user with entered mail and password. Returns null if user does not exists.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IAuthRepository.UserExists(System.String)">
            <summary>
            Checks if given user with user name exists in the database.
            </summary>
            <param name="userName">Username to be checked in the database.</param>
            <returns>Returns true if user exists, else return false.</returns>
        </member>
        <member name="T:ClubManagerBackup.Context.ICategoryRepository">
            <summary>
            Interface for CategoryRepository
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.ICategoryRepository.AddCategory(ClubManagerBackup.Entities.Category)">
            <summary>
            Adds new category to the database.
            </summary>
            <param name="newCategory">Category to be added.</param>
            <returns>Returns added category.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ICategoryRepository.DeleteCategory(ClubManagerBackup.Entities.Category)">
            <summary>
            Deletes category from the database.
            </summary>
            <param name="categoryToDelete">Category to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ICategoryRepository.CategoryExists(System.String)">
            <summary>
            Checks if category with given name exists in the database.
            </summary>
            <param name="categoryName">Category name to be checked.</param>
            <returns>Returns true if category exists, else returns false.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ICategoryRepository.GetCategories">
            <summary>
            Gets all categories from the database.
            </summary>
            <returns>Returns the list of all categories.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.ICategoryRepository.GetCategoryByID(System.Int32)">
            <summary>
            Finds a category from the databse with given ID.
            </summary>
            <param name="ID">ID of the searched category.</param>
            <returns>Returns category with given ID.</returns>
        </member>
        <member name="T:ClubManagerBackup.Context.IClubRepository">
            <summary>
            Interface for ClubRepository
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.IClubRepository.GetClubs">
            <summary>
            Gets all clubs from the database.
            </summary>
            <returns>Returns the list of all clubs.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IClubRepository.GetClubById(System.Int32)">
            <summary>
            Finds a club from the databse with given ID.
            </summary>
            <param name="id">ID of the searched club.</param>
            <returns>Returns the club with given ID.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IClubRepository.GetClubByName(System.String)">
            <summary>
            Finds a club from the database with given name.
            </summary>
            <param name="name">Name of the searched club.</param>
            <returns>Returns the with given name.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IClubRepository.ClubExists(System.String)">
            <summary>
            Checks if the club with given club name is exists in the database.
            </summary>
            <param name="clubName">Club name to be checked.</param>
            <returns>Returns true if club exists, else return false.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IClubRepository.AddClub(ClubManagerBackup.Entities.Club)">
            <summary>
            Adds new club to the database.
            </summary>
            <param name="newClub">New club to be added.</param>
            <returns>Returns added club.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IClubRepository.UpdateClub(ClubManagerBackup.Entities.Club)">
            <summary>
            Updates the club data in the database.
            </summary>
            <param name="clubToUpdate">Club to be updated.</param>
            <returns>Returns updated club.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IClubRepository.RemoveClub(ClubManagerBackup.Entities.Club)">
            <summary>
            Removes club from the database.
            </summary>
            <param name="clubToDelete">Club to be deleted.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Context.IEventHandler">
            <summary>
            Interface for EventHandler
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.IEventHandler.CreateEvent(ClubManagerBackup.Entities.StudentEvent,ClubManagerBackup.Context.DataContext)">
            <summary>
            Creates event.
            </summary>
            <param name="newEvent">Event to be created.</param>
            <param name="context">Database reference.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Context.IEventRepository">
            <summary>
            Interface for EventRepository
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.IEventRepository.AddEvent(ClubManagerBackup.Entities.Event)">
            <summary>
            Adds new event to the database. 
            </summary>
            <param name="newEvent">New event to be added.</param>
            <returns>Returns added event.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IEventRepository.UpdateEvent(ClubManagerBackup.Entities.Event)">
            <summary>
            Updates the event data in the database.
            </summary>
            <param name="eventToUpdate">Event to be updated.</param>
            <returns>Returns updated event.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IEventRepository.DeleteEvent(ClubManagerBackup.Entities.Event)">
            <summary>
            Deletes event from the database.
            </summary>
            <param name="eventToDelete">Event to be deleted.</param>
        </member>
        <member name="M:ClubManagerBackup.Context.IEventRepository.EventExists(System.String)">
            <summary>
            Checks if event with given name exists in the database. 
            </summary>
            <param name="eventName">Name of the club to be checked.</param>
            <returns>Returns true if event exists, else returns false.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IEventRepository.GetEvents">
            <summary>
            Gets all events in the database.
            </summary>
            <returns>Returns list of all events.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IEventRepository.GetEventByID(System.Int32)">
            <summary>
            Finds a event from the database with given ID.
            </summary>
            <param name="ID">ID of the searched event.</param>
            <returns>Returns the with given ID.</returns>
        </member>
        <member name="T:ClubManagerBackup.Context.IPlaceRepository">
            <summary>
            Interface for PlaceRepository
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.IPlaceRepository.AddPlace(ClubManagerBackup.Entities.Place)">
            <summary>
            Adds new place to the database. 
            </summary>
            <param name="newPlace">New place to be added.</param>
            <returns>Returns added place.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IPlaceRepository.DeletePlace(ClubManagerBackup.Entities.Place)">
            <summary>
            Deletes place from the database.
            </summary>
            <param name="placeToDelete">Place to be deleted.</param>
        </member>
        <member name="M:ClubManagerBackup.Context.IPlaceRepository.PlaceExists(System.String)">
            <summary>
            Checks if place with given name exists in the database. 
            </summary>
            <param name="placeName">Name of the club to be checked.</param>
            <returns>Returns true if place exists, else returns false.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IPlaceRepository.GetPlaces">
            <summary>
            Gets all places in the database.
            </summary>
            <returns>Returns list of all places.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IPlaceRepository.GetPlaceByID(System.Int32)">
            <summary>
            Finds a place from the database with given ID.
            </summary>
            <param name="ID">ID of the searched place.</param>
            <returns>Returns the with given ID.</returns>
        </member>
        <member name="T:ClubManagerBackup.Context.IUserRepository">
            <summary>
            Interface for UserRepository
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.IUserRepository.Add``1(``0)">
            <summary>
            Adds user to the database.
            </summary>
            <typeparam name="T">Type of object:User.</typeparam>
            <param name="entity">User to be added</param>
        </member>
        <member name="M:ClubManagerBackup.Context.IUserRepository.Delete``1(``0)">
            <summary>
            Deletes user from the database.
            </summary>
            <typeparam name="T">Type of object:User.</typeparam>
            <param name="entity">User to be deleted.</param>
        </member>
        <member name="M:ClubManagerBackup.Context.IUserRepository.SaveAll``1(``0)">
            <summary>
            Save all changes to the database.
            </summary>
            <typeparam name="T">Type of object:User.</typeparam>
            <param name="entity">Entity to be saved.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IUserRepository.GetUsers">
            <summary>
            Gets all users in the database.
            </summary>
            <returns>Returns list of all users.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IUserRepository.GetUserByID(System.Int32)">
            <summary>
            Finds a user from the database with given ID.
            </summary>
            <param name="ID">ID of the searched user.</param>
            <returns>Returns the with given ID.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IUserRepository.GetUserByMail(System.String)">
            <summary>
            Finds a user from the database with given mail.
            </summary>
            <param name="mail">Mail of the searched user.</param>
            <returns>Returns the with given ID.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.IUserRepository.DeleteUser(ClubManagerBackup.Entities.User)">
            <summary>
            Deletes user from the database.
            </summary>
            <param name="userToDelete">User to be deleted.</param>
        </member>
        <member name="T:ClubManagerBackup.Context.PlaceRepository">
            <summary>
            Repository for Places
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.PlaceRepository.#ctor(ClubManagerBackup.Context.DataContext)">
            <summary>
            Constructor for PlaceRepository class
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ClubManagerBackup.Context.PlaceRepository.AddPlace(ClubManagerBackup.Entities.Place)">
            <summary>
            Adds new place to the database. 
            </summary>
            <param name="newPlace">New place to be added.</param>
            <returns>Returns added place.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.PlaceRepository.DeletePlace(ClubManagerBackup.Entities.Place)">
            <summary>
            Deletes place from the database.
            </summary>
            <param name="placeToDelete">Place to be deleted.</param>
        </member>
        <member name="M:ClubManagerBackup.Context.PlaceRepository.GetPlaceByID(System.Int32)">
            <summary>
            Finds a place from the database with given ID.
            </summary>
            <param name="ID">ID of the searched place.</param>
            <returns>Returns the with given ID.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.PlaceRepository.GetPlaces">
            <summary>
            Gets all places in the database.
            </summary>
            <returns>Returns list of all places.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.PlaceRepository.PlaceExists(System.String)">
            <summary>
            Checks if place with given name exists in the database. 
            </summary>
            <param name="placeName">Name of the club to be checked.</param>
            <returns>Returns true if place exists, else returns false.</returns>
        </member>
        <member name="T:ClubManagerBackup.Context.StudentEventCreator">
            <summary>
            Singleton class for Student Event Creator
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.StudentEventCreator.getInstance">
            <summary>
            Gets singleton instance of StudentEventCreator object.
            </summary>
            <returns>Returns the StudentEventCreator.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.StudentEventCreator.CreateEvent(ClubManagerBackup.Entities.StudentEvent,ClubManagerBackup.Context.DataContext)">
            <summary>
            Creates student event.
            </summary>
            <param name="studentEvent">Event to be created.</param>
            <param name="context">Database to store the event.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Context.UserRepository">
            <summary>
            Repository for Users
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Context.UserRepository.#ctor(ClubManagerBackup.Context.DataContext)">
            <summary>
            Constructor for UserRepository class
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ClubManagerBackup.Context.UserRepository.Add``1(``0)">
            <summary>
            Adds user to the database.
            </summary>
            <typeparam name="T">Type of object:User.</typeparam>
            <param name="entity">User to be added</param>
        </member>
        <member name="M:ClubManagerBackup.Context.UserRepository.Delete``1(``0)">
            <summary>
            Deletes user from the database.
            </summary>
            <typeparam name="T">Type of object:User.</typeparam>
            <param name="entity">User to be deleted.</param>
        </member>
        <member name="M:ClubManagerBackup.Context.UserRepository.GetUserByID(System.Int32)">
            <summary>
            Finds a user from the database with given ID.
            </summary>
            <param name="ID">ID of the searched user.</param>
            <returns>Returns the with given ID.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.UserRepository.GetUserByMail(System.String)">
            <summary>
            Finds a user from the database with given mail.
            </summary>
            <param name="mail">Mail of the searched user.</param>
            <returns>Returns the with given ID.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.UserRepository.GetUsers">
            <summary>
            Gets all users in the database.
            </summary>
            <returns>Returns list of all users.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.UserRepository.SaveAll``1(``0)">
            <summary>
            Save all changes to the database.
            </summary>
            <typeparam name="T">Type of object:User.</typeparam>
            <param name="entity">Entity to be saved.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:ClubManagerBackup.Context.UserRepository.DeleteUser(ClubManagerBackup.Entities.User)">
            <summary>
            Deletes user from the database.
            </summary>
            <param name="userToDelete">User to be deleted.</param>
        </member>
        <member name="T:ClubManagerBackup.Controllers.AuthController">
            <summary>
            Controller class for Authentication
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Controllers.AuthController.#ctor(ClubManagerBackup.Context.IAuthRepository,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor for AuthController
            </summary>
            <param name="authRepository">AuthRepository reference.</param>
            <param name="configuration">Configuration reference.</param>
        </member>
        <member name="M:ClubManagerBackup.Controllers.AuthController.Register(ClubManagerBackup.Dtos.RegisterDto)">
            <summary>
            Registers user to the system.
            </summary>
            <param name="registerDto">Data transfer object of user to be registered.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.AuthController.Login(ClubManagerBackup.Dtos.LoginDto)">
            <summary>
            Logs in user to the system.
            </summary>
            <param name="loginDto">Data transfer object of user to be logged in.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.AuthController.ChangePassword(ClubManagerBackup.Dtos.ChangePasswordDto)">
            <summary>
            Logs in user to the system.
            </summary>
            <param name="loginDto">Data transfer object of user to be logged in.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Controllers.CategoryController">
            <summary>
            Controller class for Categories
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Controllers.CategoryController.#ctor(ClubManagerBackup.Context.ICategoryRepository,Microsoft.Extensions.Configuration.IConfiguration,AutoMapper.IMapper,ClubManagerBackup.Context.DataContext)">
            <summary>
            Constructor for AuthController
            </summary>
            <param name="categoryRepository">CategoryRepository reference.</param>
            <param name="configuration">Configuration reference.</param>
            <param name="mapper">Mapper reference.</param>
            <param name="context">Database reference.</param>
        </member>
        <member name="M:ClubManagerBackup.Controllers.CategoryController.AddCategory(ClubManagerBackup.Entities.CategoryDto)">
            <summary>
            Adds category to the system.
            </summary>
            <param name="categoryDto">Data transfer object of category to be added.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.CategoryController.DeleteCategory(ClubManagerBackup.Entities.CategoryDto)">
            <summary>
            Deletes category from the system.
            </summary>
            <param name="categoryDto">Data transfer object of category to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.CategoryController.GetCategories">
            <summary>
            Gets all categories in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.CategoryController.GetCategoryByID(System.Int32)">
            <summary>
            Gets category with given ID.
            </summary>
            <param name="ID">ID of category to be searched.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Controllers.ClubController">
            <summary>
            Controller class for Clubs
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Controllers.ClubController.#ctor(ClubManagerBackup.Context.IClubRepository,AutoMapper.IMapper)">
            <summary>
            /// 
            </summary>
            <param name="clubRepository"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:ClubManagerBackup.Controllers.ClubController.GetClubs">
            <summary>
            Gets all clubs in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.ClubController.GetClubById(System.Int32)">
            <summary>
            Gets club with given ID.
            </summary>
            <param name="id">ID of club to be searched.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.ClubController.AddClub(ClubManagerBackup.Dtos.ClubDto)">
            <summary>
            Adds club to the system.
            </summary>
            <param name="clubDto">Data transfer object of club to be added.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.ClubController.UpdateClub(ClubManagerBackup.Dtos.ClubDto)">
            <summary>
            Updates club in the system.
            </summary>
            <param name="clubDto">Data transfer object of club to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.ClubController.DeleteClub(ClubManagerBackup.Dtos.ClubDto)">
            <summary>
            Deletes club from the system.
            </summary>
            <param name="clubDto">Data transfer object of club to be deleted.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Controllers.EventController">
            <summary>
            Controller class for Events.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Controllers.EventController.#ctor(ClubManagerBackup.Context.IEventRepository,Microsoft.Extensions.Configuration.IConfiguration,AutoMapper.IMapper,ClubManagerBackup.Context.DataContext,ClubManagerBackup.Context.ICategoryRepository,ClubManagerBackup.Context.IClubRepository,ClubManagerBackup.Context.IPlaceRepository,ClubManagerBackup.Context.IEventToClubRepository)">
            <summary>
            Constructor for EventController.
            </summary>
            <param name="eventRepository">EventRepository reference.</param>
            <param name="configuration">Configuration reference.</param>
            <param name="mapper">Mapper reference.</param>
            <param name="context">Database reference.</param>
        </member>
        <member name="M:ClubManagerBackup.Controllers.EventController.AddEvent(ClubManagerBackup.Dtos.EventDto)">
            <summary>
            Adds event to the system.
            </summary>
            <param name="eventDto">Data transfer object of event to be added.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.EventController.UpdateEvent(ClubManagerBackup.Dtos.EventDto)">
            <summary>
            Updates event in the system.
            </summary>
            <param name="eventDto">Data transfer object of event to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.EventController.DeleteEvent(ClubManagerBackup.Dtos.EventDto)">
            <summary>
            Deletes event from the system.
            </summary>
            <param name="eventDto">Data transfer object of event to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.EventController.GetEvents">
            <summary>
            Gets all events in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.EventController.GetEventByID(System.Int32)">
            <summary>
            Gets event with given ID.
            </summary>
            <param name="ID">ID of event to be searched.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Controllers.PlaceController">
            <summary>
            Controller class for Places
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Controllers.PlaceController.#ctor(ClubManagerBackup.Context.IPlaceRepository,Microsoft.Extensions.Configuration.IConfiguration,AutoMapper.IMapper,ClubManagerBackup.Context.DataContext)">
            <summary>
            Constructor for EventController.
            </summary>
            <param name="placeRepository">PlaceRepository reference.</param>
            <param name="configuration">Configuration reference.</param>
            <param name="mapper">Mapper reference.</param>
            <param name="context">Database reference.</param>
        </member>
        <member name="M:ClubManagerBackup.Controllers.PlaceController.AddPlace(ClubManagerBackup.Dtos.PlaceDto)">
            <summary>
            Adds place to the system.
            </summary>
            <param name="placeDto">Data transfer object of place to be added.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.PlaceController.DeletePlace(ClubManagerBackup.Dtos.PlaceDto)">
            <summary>
            Deletes place from the system.
            </summary>
            <param name="placeDto">Data transfer object of place to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.PlaceController.GetPlaces">
            <summary>
            Gets all places in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.PlaceController.GetPlaceByID(System.Int32)">
            <summary>
            Gets place with given ID.
            </summary>
            <param name="ID">ID of place to be searched.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Controllers.UserController">
            <summary>
            Controller class for Users
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Controllers.UserController.#ctor(ClubManagerBackup.Context.IUserRepository,AutoMapper.IMapper,ClubManagerBackup.Context.IEventRepository,ClubManagerBackup.Context.DataContext,ClubManagerBackup.Context.IUserToClubRepository)">
            <summary>
            Constructor for EventController.
            </summary>
            <param name="userRepository">UserRepository reference.</param>
            <param name="eventRepository">EventRepository reference.</param>
            <param name="mapper">Mapper reference.</param>
            <param name="context">Database reference.</param>
        </member>
        <member name="M:ClubManagerBackup.Controllers.UserController.GetUsers">
            <summary>
            Gets all events in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.UserController.GetUserByID(System.Int32)">
            <summary>
            Gets event with given ID.
            </summary>
            <param name="ID">ID of event to be searched.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.UserController.GetUserByMail(System.String)">
            <summary>
            Finds a user from the database with given mail.
            </summary>
            <param name="mail">Mail of the searched user.</param>
        </member>
        <member name="M:ClubManagerBackup.Controllers.UserController.AddEvent(ClubManagerBackup.Dtos.StudentEventDto)">
            <summary>
            Adds student event to the user.
            </summary>
            <param name="eventDto">Data transfer object of student event to be added.</param>
            <returns></returns>
        </member>
        <member name="M:ClubManagerBackup.Controllers.UserController.DeleteUser(ClubManagerBackup.Dtos.UserDto)">
            <summary>
            Deletes user from the system.
            </summary>
            <param name="userDto">Data transfer object of user to be deleted.</param>
            <returns></returns>
        </member>
        <member name="T:ClubManagerBackup.Entities.CategoryDto">
            <summary>
            Data transfer object of Category.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.CategoryDto.ID">
            <summary>
            ID of the category in the database.
            </summary>
            <value>ID of the category.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.CategoryDto.CategoryName">
            <summary>
            Name of the category in the database.
            </summary>
            <value>Name of the category.</value>
        </member>
        <member name="T:ClubManagerBackup.Entities.Admin">
            <summary>
            Admin object. Admin is a User.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Entities.Admin.#ctor">
            <summary>
            Constructor for admin object.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.Admin.RequestedEvents">
            <summary>
            List of requested event creation from students.
            </summary>
            <value></value>
        </member>
        <member name="T:ClubManagerBackup.Entities.Category">
            <summary>
            Category object.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.Category.ID">
            <summary>
            ID of the category in the database.
            </summary>
            <value>ID of the category.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Category.CategoryName">
            <summary>
            Name of the category in the database.
            </summary>
            <value>Name of the category.</value>
        </member>
        <member name="T:ClubManagerBackup.Entities.Club">
            <summary>
            Club object.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Entities.Club.#ctor">
            <summary>
            Constructor for club object.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.ID">
            <summary>
            ID of the club in the database.
            </summary>
            <value>ID of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.Name">
            <summary>
            Name of the club in the database.
            </summary>
            <value>Name of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.ClubDescription">
            <summary>
            Description of the club in the database.
            </summary>
            <value>Description of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.StudentsClubMembers">
            <summary>
            Members of the club in the database.
            </summary>
            <value>Members of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.EventsOld">
            <summary>
            Old events of the club in the database.
            </summary>
            <value>Old events of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.ClubPresidentID">
            <summary>
            ID of the president of the club in the database.
            </summary>
            <value>ID of the club president.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.ImageURL">
            <summary>
            Image URL of the club.
            </summary>
            <value>Image URL of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.ClubBudget">
            <summary>
            Budget of the club in the database.
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.ClubRoles">
            <summary>
            Club roles of the club.
            </summary>
            <value>Club roles.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.WhatsappLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.InstagramLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.FacebookLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.TelegramLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.LinkedinLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Club.TwitterLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:ClubManagerBackup.Entities.ClubBoardMember">
            <summary>
            Club board member object.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Entities.ClubBoardMember.#ctor">
            <summary>
            Constructor for ClubBoardMember.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.ClubBoardMember.RoleOfMember">
            <summary>
            Role of the member in the club.
            </summary>
            <value>Role of the member.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.ClubBoardMember.CreatedEvents">
            <summary>
            Created events of the board member.
            </summary>
            <value></value>
        </member>
        <member name="T:ClubManagerBackup.Entities.ClubPresident">
            <summary>
            Club president object.
            </summary>
        </member>
        <member name="T:ClubManagerBackup.Entities.ClubRole">
            <summary>
            Club roles object.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.ClubRole.ID">
            <summary>
            ID of the club role.
            </summary>
            <value>Id of the club role.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.ClubRole.ClubRoleName">
            <summary>
            Name of the club role.
            </summary>
            <value>Name of the club role.</value>
        </member>
        <member name="T:ClubManagerBackup.Entities.Event">
            <summary>
            Event object.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Entities.Event.#ctor">
            <summary>
            Constructor for Event.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.ID">
            <summary>
            ID of the event in the database.
            </summary>
            <value>ID of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.Name">
            <summary>
            Name of the event in the database.
            </summary>
            <value>Name of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.Description">
            <summary>
            Description of the event in the database.
            </summary>
            <value>Description of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.ClubID">
            <summary>
            ID of the owner club of the event in the database.
            </summary>
            <value>ID of the owner club of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.Date">
            <summary>
            Date of the event in the database.
            </summary>
            <value>Date of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.Notification">
            <summary>
            Notificaton of the event.
            </summary>
            <value>Notification of event.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.ImageURL">
            <summary>
            Image url of event in the databse.
            </summary>
            <value>Image url of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.EventCost">
            <summary>
            Cost of the event in the database.
            </summary>
            <value>Cost of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.Capacity">
            <summary>
            Capacity of the event in the database.
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.Participants">
            <summary>
            Participants of the event in the database.
            </summary>
            <value>Participans of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.ClubBoardMemberID">
            <summary>
            ID of the club board member that created the event.
            </summary>
            <value>ID of the club board member that created the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Event.UserId">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:ClubManagerBackup.Entities.Notification">
            <summary>
            Notification object.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.Notification.ID">
            <summary>
            ID of the notification in the database.
            </summary>
            <value>ID of the notification</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Notification.NotificationName">
            <summary>
            Name of the notification in the database.
            </summary>
            <value>Name of the notification.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Notification.notificationDescription">
            <summary>
            Description of the notification in the database.
            </summary>
            <value>Description of the notification.</value>
        </member>
        <member name="T:ClubManagerBackup.Entities.Place">
            <summary>
            Place object.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.Place.ID">
            <summary>
            ID of the place in the database.
            </summary>
            <value>ID of the place.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Place.Building">
            <summary>
            Building name of the place in the database.
            </summary>
            <value>Building name of the place.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Place.Room">
            <summary>
            Room name of the place in the database.
            </summary>
            <value>Room name of the place.</value>
        </member>
        <member name="T:ClubManagerBackup.Entities.Student">
            <summary>
            Student object. Student is a User.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Entities.Student.#ctor">
            <summary>
            Constructor for Student.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.Student.FollowedClubs">
            <summary>
            Followed clubs of student.
            </summary>
            <value>Followed clubs of student.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Student.AppliedEvents">
            <summary>
            Participated events of the student.
            </summary>
            <value>Participated events of the student.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Student.CreatedEvents">
            <summary>
            Created student events of student.
            </summary>
            <value>Created student events of student.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Student.Friends">
            <summary>
            Friends of the student.
            </summary>
            <value>Friends of the student.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.Student.Invitations">
            <summary>
            Invitations to events of student.
            </summary>
            <value>Invitations to events of student.</value>
        </member>
        <member name="T:ClubManagerBackup.Entities.StudentEvent">
            <summary>
            StudentEvent object. StudentEvent is Event.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.StudentEvent.AdminID">
            <summary>
            ID of the Admin that approval is gone.
            </summary>
            <value>ID of the Admin that approval is gone.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.StudentEvent.IsApproved">
            <summary>
            Approval of the student event.
            </summary>
            <value>Approval of the student event.</value>
        </member>
        <member name="T:ClubManagerBackup.Entities.User">
            <summary>
            User object.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Entities.User.#ctor">
            <summary>
            Constructor for User.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Entities.User.ID">
            <summary>
            ID of the user in the database.
            </summary>
            <value>ID of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.User.Name">
            <summary>
            Name of the user in the database.
            </summary>
            <value>Name of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.User.Mail">
            <summary>
            Mail of the user in the database.
            </summary>
            <value>Mail of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.User.PasswordHash">
            <summary>
            Hashed ppassword of the user in the database.
            </summary>
            <value>Hashed password of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.User.PasswordSalt">
            <summary>
            Salted password of the user in the database.
            </summary>
            <value>Salted password of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.User.Department">
            <summary>
            Department of the user in the database. 
            </summary>
            <value>Department of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.User.Discriminator">
            <summary>
            Discriminator of the user to show user type.
            </summary>
            <value>Discriminator of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Entities.User.Notifications">
            <summary>
            Notifications of the user.
            </summary>
            <value>Notifications of the user.</value>
        </member>
        <member name="T:ClubManagerBackup.Dtos.ClubDto">
            <summary>
            Data transfer object of Club.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.ID">
            <summary>
            ID of the club in the database.
            </summary>
            <value>ID of the Club.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.Name">
            <summary>
            Name of the club in the database.
            </summary>
            <value>Name of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.ClubDescription">
            <summary>
            Description of the club in the database.
            </summary>
            <value>Description of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.ClubPresidentID">
            <summary>
            ID of the club president in the database.
            </summary>
            <value>ClubPresidentID</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.StudentsClubMembers">
            <summary>
            Members of the club in the database.
            </summary>
            <value>Members of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.ImageURL">
            <summary>
            Image URL of the club.
            </summary>
            <value>Image URL of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.ClubBudget">
            <summary>
            Bugdet of the club in the database.
            </summary>
            <value>Bugdet of the club.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.WhatsappLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.InstagramLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.FacebookLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.TelegramLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.LinkedinLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.ClubDto.TwitterLink">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:ClubManagerBackup.Dtos.EventDto">
            <summary>
            Data transfer object of Event.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Dtos.EventDto.ID">
            <summary>
            ID of the event in the database.
            </summary>
            <value>ID of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.EventDto.Name">
            <summary>
            Name of the event in the database.
            </summary>
            <value>Name of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.EventDto.Description">
            <summary>
            Description of the event in the database.
            </summary>
            <value>Description of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.EventDto.PlaceName">
            <summary>
            ID of the place that event will be done in the database.
            </summary>
            <value>ID of the place that event takes place.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.EventDto.EventCost">
            <summary>
            Cost of the event in the database.
            </summary>
            <value>Cost of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.EventDto.Capacity">
            <summary>
            Capacity of the event in the database.
            </summary>
            <value>Capacity of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.EventDto.ClubID">
            <summary>
            ID of the owner club of the event in the database.
            </summary>
            <value>ID of the event's owner club.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.EventDto.UserID">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.EventDto.ImageURL">
            <summary>
            Image URL of the event in the database.
            </summary>
            <value>Image URL of the event.</value>
            
        </member>
        <member name="P:ClubManagerBackup.Dtos.EventDto.ClubBoardMemberID">
            <summary>
            ID of the club board member that created the event.
            </summary>
            <value>ID of the club board member that created the event.</value>
        </member>
        <member name="F:ClubManagerBackup.Dtos.EventDto.Discriminator">
            <summary>
            Discriminator to differentiate Club and Student events.
            </summary>
        </member>
        <member name="T:ClubManagerBackup.Dtos.LoginDto">
            <summary>
            Data transfer object of Login.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Dtos.LoginDto.Mail">
            <summary>
            Mail of the user.
            </summary>
            <value>Mail of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.LoginDto.Password">
            <summary>
            Password of the user.
            </summary>
            <value>Password f the user.</value>
        </member>
        <member name="T:ClubManagerBackup.Dtos.PlaceDto">
            <summary>
            Data transfer object of Place.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Dtos.PlaceDto.ID">
            <summary>
            ID of the place in the database.
            </summary>
            <value>ID of the place.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.PlaceDto.Building">
            <summary>
            Building name of the place in the database.
            </summary>
            <value>Building name of the place.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.PlaceDto.Room">
            <summary>
            Room name of the place in the database.
            </summary>
            <value>Room name of the place.</value>
        </member>
        <member name="T:ClubManagerBackup.Dtos.RegisterDto">
            <summary>
            Data transfer object of Register.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Dtos.RegisterDto.Name">
            <summary>
            Name of the user to be registered.
            </summary>
            <value>Name of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.RegisterDto.Password">
            <summary>
            Password of the user to be registered.
            </summary>
            <value>Password of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.RegisterDto.Mail">
            <summary>
            Mail of the user to be registered.
            </summary>
            <value>Mail of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.RegisterDto.Department">
            <summary>
            Department of the user to be registered.
            </summary>
            <value></value>
        </member>
        <member name="F:ClubManagerBackup.Dtos.RegisterDto.Discriminator">
            <summary>
            Discriminator to discriminate user types.
            </summary>
        </member>
        <member name="T:ClubManagerBackup.Dtos.StudentEventDto">
            <summary>
            Data transfer object of Student Event
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Dtos.StudentEventDto.ID">
            <summary>
            ID of the student event in the database.
            </summary>
            <value>ID of the student event.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.StudentEventDto.Name">
            <summary>
            Name of the student event in the database.
            </summary>
            <value>Name of the student event.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.StudentEventDto.Description">
            <summary>
            Description of the student event in the database.
            </summary>
            <value>Description of the student event.s</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.StudentEventDto.EventCost">
            <summary>
            Cost of the student event in the database.
            </summary>
            <value>Cost of the student event.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.StudentEventDto.Capacity">
            <summary>
            Capacity of the student event in the database.
            </summary>
            <value>Capacity of the student event.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.StudentEventDto.UserID">
            <summary>
            ID of the student event owner.
            </summary>
            <value>ID of the owner student.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.StudentEventDto.ImageURL">
            /// <summary>
            Image URL of the event in the database.
            </summary>
            <value>Image URL of the event.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.StudentEventDto.IsApproved">
            <summary>
            Approval of Admin users.
            </summary>
            <value>Approval of Admin users.</value>
        </member>
        <member name="F:ClubManagerBackup.Dtos.StudentEventDto.Discriminator">
            <summary>
            Discriminator to show this is StudentEvent.
            </summary>
        </member>
        <member name="T:ClubManagerBackup.Dtos.UserDto">
            <summary>
            Data transfer object of User.
            </summary>
        </member>
        <member name="P:ClubManagerBackup.Dtos.UserDto.ID">
            <summary>
            ID of the user in the database.
            </summary>
            <value>ID of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.UserDto.Name">
            <summary>
            Name of the user in the database.
            </summary>
            <value>Name of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.UserDto.Mail">
            <summary>
            Mail of the user in the database.
            </summary>
            <value>Mail of the user.</value>
        </member>
        <member name="P:ClubManagerBackup.Dtos.UserDto.Department">
            <summary>
            Department of the user in the database.
            </summary>
            <value>Department of the user.</value>
        </member>
        <member name="T:ClubManagerBackup.Helpers.AutoMapperProfiles">
            <summary>
            Maps similar classes automatically.
            </summary>
        </member>
        <member name="M:ClubManagerBackup.Helpers.AutoMapperProfiles.#ctor">
            <summary>
            Constructor of AutoMapperProfile.
            </summary>
        </member>
    </members>
</doc>
