// <auto-generated />
using System;
using ClubManagerBackup.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClubManagerBackup.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211121215826_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClubManagerBackup.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Club", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClubBudget")
                        .HasColumnType("int");

                    b.Property<string>("ClubDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClubPresidentID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SearchClubSearchID")
                        .HasColumnType("int");

                    b.Property<int?>("SocialMediaAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID1")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID2")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClubPresidentID");

                    b.HasIndex("SearchClubSearchID");

                    b.HasIndex("SocialMediaAccountID");

                    b.HasIndex("StudentID");

                    b.HasIndex("StudentID1");

                    b.HasIndex("StudentID2");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.ClubRole", b =>
                {
                    b.Property<int>("ClubRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClubID")
                        .HasColumnType("int");

                    b.Property<string>("ClubRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClubRoleID");

                    b.HasIndex("ClubID");

                    b.ToTable("ClubRole");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("ClubBoardMemberID")
                        .HasColumnType("int");

                    b.Property<int>("ClubID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventCost")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationID")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceID")
                        .HasColumnType("int");

                    b.Property<int?>("SearchEventSearchID")
                        .HasColumnType("int");

                    b.Property<int?>("SearchEventSearchID1")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ClubBoardMemberID");

                    b.HasIndex("ClubID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("PlaceID");

                    b.HasIndex("SearchEventSearchID");

                    b.HasIndex("SearchEventSearchID1");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Event");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NotificationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("notificationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.HasIndex("StudentID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Place", b =>
                {
                    b.Property<int>("PlaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceID");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Search", b =>
                {
                    b.Property<int>("SearchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchBar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SearchID");

                    b.ToTable("Searches");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Search");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.SocialMediaAccount", b =>
                {
                    b.Property<int>("SocialMediaAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelegramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsappLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocialMediaAccountID");

                    b.ToTable("SocialMediaAccounts");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClubID")
                        .HasColumnType("int");

                    b.Property<int?>("ClubID1")
                        .HasColumnType("int");

                    b.Property<int?>("ClubID2")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClubID");

                    b.HasIndex("ClubID1");

                    b.HasIndex("ClubID2");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("EventStudent", b =>
                {
                    b.Property<int>("OldEventsID")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantsID")
                        .HasColumnType("int");

                    b.HasKey("OldEventsID", "ParticipantsID");

                    b.HasIndex("ParticipantsID");

                    b.ToTable("EventStudent");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.StudentEvent", b =>
                {
                    b.HasBaseType("ClubManagerBackup.Entities.Event");

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.HasIndex("AdminID");

                    b.HasIndex("StudentID");

                    b.HasDiscriminator().HasValue("StudentEvent");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.SearchClub", b =>
                {
                    b.HasBaseType("ClubManagerBackup.Entities.Search");

                    b.HasDiscriminator().HasValue("SearchClub");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.SearchEvent", b =>
                {
                    b.HasBaseType("ClubManagerBackup.Entities.Search");

                    b.HasDiscriminator().HasValue("SearchEvent");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.SearchStudent", b =>
                {
                    b.HasBaseType("ClubManagerBackup.Entities.Search");

                    b.HasDiscriminator().HasValue("SearchStudent");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Admin", b =>
                {
                    b.HasBaseType("ClubManagerBackup.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.ClubBoardMember", b =>
                {
                    b.HasBaseType("ClubManagerBackup.Entities.User");

                    b.Property<string>("RoleOfMember")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ClubBoardMember");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Student", b =>
                {
                    b.HasBaseType("ClubManagerBackup.Entities.User");

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SearchStudentSearchID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.HasIndex("AdminID");

                    b.HasIndex("SearchStudentSearchID");

                    b.HasIndex("StudentID");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.ClubPresident", b =>
                {
                    b.HasBaseType("ClubManagerBackup.Entities.ClubBoardMember");

                    b.HasDiscriminator().HasValue("ClubPresident");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Club", b =>
                {
                    b.HasOne("ClubManagerBackup.Entities.ClubPresident", "ClubPresident")
                        .WithMany()
                        .HasForeignKey("ClubPresidentID");

                    b.HasOne("ClubManagerBackup.Entities.SearchClub", null)
                        .WithMany("ListedClubs")
                        .HasForeignKey("SearchClubSearchID");

                    b.HasOne("ClubManagerBackup.Entities.SocialMediaAccount", "SocialMediaAccount")
                        .WithMany()
                        .HasForeignKey("SocialMediaAccountID");

                    b.HasOne("ClubManagerBackup.Entities.Student", null)
                        .WithMany("FollowedClubs")
                        .HasForeignKey("StudentID");

                    b.HasOne("ClubManagerBackup.Entities.Student", null)
                        .WithMany("IgnoredClubs")
                        .HasForeignKey("StudentID1");

                    b.HasOne("ClubManagerBackup.Entities.Student", null)
                        .WithMany("JoinedClubs")
                        .HasForeignKey("StudentID2");

                    b.Navigation("ClubPresident");

                    b.Navigation("SocialMediaAccount");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.ClubRole", b =>
                {
                    b.HasOne("ClubManagerBackup.Entities.Club", null)
                        .WithMany("ClubRoles")
                        .HasForeignKey("ClubID");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Event", b =>
                {
                    b.HasOne("ClubManagerBackup.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("ClubManagerBackup.Entities.ClubBoardMember", "ClubBoardMember")
                        .WithMany()
                        .HasForeignKey("ClubBoardMemberID");

                    b.HasOne("ClubManagerBackup.Entities.Club", "Club")
                        .WithMany("EventsOld")
                        .HasForeignKey("ClubID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManagerBackup.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationID");

                    b.HasOne("ClubManagerBackup.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID");

                    b.HasOne("ClubManagerBackup.Entities.SearchEvent", null)
                        .WithMany("FilteredEvents")
                        .HasForeignKey("SearchEventSearchID");

                    b.HasOne("ClubManagerBackup.Entities.SearchEvent", null)
                        .WithMany("ListedEvents")
                        .HasForeignKey("SearchEventSearchID1");

                    b.Navigation("Category");

                    b.Navigation("Club");

                    b.Navigation("ClubBoardMember");

                    b.Navigation("Notification");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Notification", b =>
                {
                    b.HasOne("ClubManagerBackup.Entities.Student", null)
                        .WithMany("Invitations")
                        .HasForeignKey("StudentID");

                    b.HasOne("ClubManagerBackup.Entities.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.User", b =>
                {
                    b.HasOne("ClubManagerBackup.Entities.Club", null)
                        .WithMany("StudentsClubFollowers")
                        .HasForeignKey("ClubID");

                    b.HasOne("ClubManagerBackup.Entities.Club", null)
                        .WithMany("StudentsClubMembers")
                        .HasForeignKey("ClubID1");

                    b.HasOne("ClubManagerBackup.Entities.Club", null)
                        .WithMany("StudentsJoinRequests")
                        .HasForeignKey("ClubID2");
                });

            modelBuilder.Entity("EventStudent", b =>
                {
                    b.HasOne("ClubManagerBackup.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("OldEventsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManagerBackup.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.StudentEvent", b =>
                {
                    b.HasOne("ClubManagerBackup.Entities.Admin", null)
                        .WithMany("RequestedEvents")
                        .HasForeignKey("AdminID");

                    b.HasOne("ClubManagerBackup.Entities.Student", "Student")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("StudentID");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Student", b =>
                {
                    b.HasOne("ClubManagerBackup.Entities.Admin", null)
                        .WithMany("Accounts")
                        .HasForeignKey("AdminID");

                    b.HasOne("ClubManagerBackup.Entities.SearchStudent", null)
                        .WithMany("ListedStudents")
                        .HasForeignKey("SearchStudentSearchID");

                    b.HasOne("ClubManagerBackup.Entities.Student", null)
                        .WithMany("Friends")
                        .HasForeignKey("StudentID");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Club", b =>
                {
                    b.Navigation("ClubRoles");

                    b.Navigation("EventsOld");

                    b.Navigation("StudentsClubFollowers");

                    b.Navigation("StudentsClubMembers");

                    b.Navigation("StudentsJoinRequests");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.User", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.SearchClub", b =>
                {
                    b.Navigation("ListedClubs");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.SearchEvent", b =>
                {
                    b.Navigation("FilteredEvents");

                    b.Navigation("ListedEvents");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.SearchStudent", b =>
                {
                    b.Navigation("ListedStudents");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Admin", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("RequestedEvents");
                });

            modelBuilder.Entity("ClubManagerBackup.Entities.Student", b =>
                {
                    b.Navigation("CreatedEvents");

                    b.Navigation("FollowedClubs");

                    b.Navigation("Friends");

                    b.Navigation("IgnoredClubs");

                    b.Navigation("Invitations");

                    b.Navigation("JoinedClubs");
                });
#pragma warning restore 612, 618
        }
    }
}
